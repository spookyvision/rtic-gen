#!/usr/bin/env python3
from sys import argv
from os.path import join as pjoin
import shutil
import os
import subprocess
import json
import argparse


supported_families = ["STM32F1", "STM32F4"]


def cargo_add(crate, features=None, git=None):
    cmd = ["cargo", "add", crate]
    if features is not None:
        cmd.extend(["--features", " ".join(features)])
    if git is not None:
        cmd.extend(["--git", git])
    call(*cmd)


def log(level, msg):
    print(f"[{level}] {msg}")


def warn(msg):
    log("WARN", msg)


def fatal(msg):
    log("FATAL", msg)
    raise SystemExit


def call(*args):
    # print(f"calling " + " ".join(args))
    subprocess.run(args).check_returncode()


def sed(fn, cmd):
    call("sed", "-i", "", "-e", cmd, fn)


def comment(start_of_line):
    return rf"s/^\({start_of_line}\)/# \1/"


def uncomment(text_after_comment):
    return rf"s/^# \({text_after_comment}\)/\1/"


def check_path(path, context=""):
    if context:
        context = f"{context} "
    abspath = os.path.abspath(path)
    if not abspath == path:
        warn(
            f"{context}{path} is not absolute, this may not be what you want (it resolves to {abspath})"
        )
    if not os.path.exists(path):
        fatal(f"{context}{path} does not exist")
    return abspath


def main():
    gen_root = os.path.dirname(__file__)
    with open(pjoin(gen_root, "gen_defaults.json"), "rb") as fh:
        defaults = json.load(fh)

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--mcu", help="name of mcu to use (e.g. STM32F103)", default=defaults.get("mcu")
    )

    parser.add_argument("name", help="name of project to generate")
    args = parser.parse_args()
    name = args.name
    mcu = args.mcu.upper()

    mcu_supported = False
    for family in supported_families:
        if mcu.startswith(family):
            mcu_supported = True
            break
    if not mcu_supported:
        raise SystemExit(f"mcu {mcu} not supported :(")

    call(
        "cargo",
        "generate",
        "--git",
        "https://github.com/rust-embedded/cortex-m-quickstart.git",
        "--name",
        name,
    )

    os.chdir(name)
    try:
        os.remove("build.rs")
    except:
        pass
    try:
        shutil.rmtree("examples")
    except:
        pass

    f1_arch = "thumbv7m-none-eabi"
    f4_arch = "thumbv7em-none-eabihf"
    if mcu.startswith("STM32F1"):
        arch = f1_arch
        cargo_add("stm32f1xx-hal", [mcu.lower(), "rt"])
    elif mcu.startswith("STM32F4"):
        arch = f4_arch
        cargo_config = pjoin(".cargo", "config.toml")
        sed(cargo_config, comment('target = '))
        sed(cargo_config, uncomment(f'target = "{f4_arch}"'))
        sed(cargo_config, f"s/target.{f1_arch}/target.{f4_arch}/")
        sed(cargo_config,
            """s_rustflags = \[_rustflags = \["-C", "linker=flip-link", "-C", "link-arg=-Tdefmt.x",_""", )
        cargo_add("stm32f4", [mcu.lower(), "rt"])
        cargo_add("stm32f4xx-hal", [mcu.lower(), "rt"])

    cargo_add("cortex-m-rtic", git="https://github.com/rtic-rs/cortex-m-rtic.git")
    cargo_add("defmt")
    cargo_add("defmt-rtt")
    cargo_add("panic-probe", features=["print-defmt"])
    cargo_add("embedded-hal")

    shutil.copy(pjoin(gen_root, mcu, "memory.x"), ".")
    shutil.copy(pjoin(gen_root, mcu, "main.rs"), "src")

    sed("Cargo.toml", "s/debug = true/debug = 2/")
    sed("Cargo.toml", "s/lto = true/lto = 'fat'/")
    with open("Cargo.toml", "ab") as c_t:
        c_t.write("""
debug-assertions = false # <-
incremental = false
opt-level = 3 # <-
overflow-checks = false # <-

# cargo build/run
[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 3 # <-
overflow-checks = true # <-

# cargo test
[profile.test]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 3 # <-
overflow-checks = true # <-

# cargo test --release
[profile.bench]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = 3 # <-
overflow-checks = false # <-

[features]
# set logging levels here
default = [
  "defmt-default",
]

# do NOT modify these features
defmt-default = []
defmt-trace = []
defmt-debug = []
defmt-info = []
defmt-warn = []
defmt-error = []
""".encode("ascii"))
    # keep? (for running tests and such)
    #shutil.copy(pjoin(gen_root, "tasks.json"), ".vscode")


if __name__ == "__main__":
    main()
